// ********************************
// ** auto generated pixelshader **
// ********************************

// Includes
#include "common_ps_fxc.h"
#include "common_vertexlitgeneric_dx9.h"
#include "common_lightmappedgeneric_fxc.h"
#include "common_flashlight_fxc.h"
#include "common_parallax.h"


// Combos
// DYNAMIC: "FLASHLIGHT"		"0..0"
// DYNAMIC: "PIXELFOGTYPE"		"0..1"
// DYNAMIC: "WRITEWATERFOGTODESTALPHA"		"0..1"

// Samplers
sampler _Sampler_00		: register( s0 );
sampler _Sampler_01		: register( s1 );
sampler _Sampler_02		: register( s2 );
sampler _Sampler_03		: register( s3 );
sampler _Sampler_04		: register( s4 );

// Constants
const float2 g_cData_warp_amount		: register( c16 ); 		// Static
const float _g_Time		: register( c17 );
const float2 g_cData_warp_directions		: register( c18 ); 		// Static
const float g_cData_warp_strength		: register( c19 ); 		// Static
const float2 g_cData_scroll_rate		: register( c20 ); 		// Static
const float g_cData_basetint_red		: register( c21 ); 		// Static
const float g_cData_basetint_green		: register( c22 ); 		// Static
const float g_cData_basetint_blue		: register( c23 ); 		// Static
const float g_cData_maskstrength		: register( c24 ); 		// Static
const float2 g_cData_fogmaskoverlay_scrollrate		: register( c25 ); 		// Static
const float g_cData_fogmaskoverlay_strength		: register( c26 ); 		// Static
const float4 _g_FogParams		: register( c27 );
const float3 _g_VecOrig		: register( c28 );

// Arrays

// Semantic structures
struct PS_INPUT
{
	float2 vTexCoord_0			:	TEXCOORD0;
	float2 vTexCoord_1			:	TEXCOORD1;
	float4 vTexCoord_2			:	TEXCOORD2;
	float3 vTexCoord_3			:	TEXCOORD3;
};

struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
};

// Entry point
PS_OUTPUT main( const PS_INPUT In )
{
	PS_OUTPUT Out;
	float2 _var0 = _g_Time * g_cData_warp_directions;
	float2 _var1 = _g_Time * g_cData_scroll_rate;
	float3 _var2 = float3( 0.000000, 0.000000, 0.000000 );
	float _var3 = tex2D( _Sampler_00, In.vTexCoord_0 ).a;
	float2 _var4 = _g_Time * g_cData_fogmaskoverlay_scrollrate;
	float _var5 = _g_VecOrig.z;
	float _var6 = In.vTexCoord_3.z;
	float _var7 = In.vTexCoord_2.z;
	{
		float2 center_def = float2( 0.5f, 0.5f );
		float rot_def = float( 0.0f );
		float2 scale_def = float2( 1.0f, 1.0f );
		float fs = sin( rot_def );
		float fc = cos( rot_def );
		float4 row_0 = float4( fc * scale_def.x, -fs * scale_def.x, 0, ( -center_def.x * fc + center_def.y * fs ) * scale_def.x + center_def.x + _var0.x );
		float4 row_1 = float4( fs * scale_def.y, fc * scale_def.y, 0, ( -center_def.x * fs - center_def.y * fc ) * scale_def.y + center_def.y + _var0.y );
		_var0.x = dot( float4( In.vTexCoord_0, 0, 1 ), row_0 );
		_var0.y = dot( float4( In.vTexCoord_0, 0, 1 ), row_1 );
	}
#if ( FLASHLIGHT == 0 )
		float3 _var8 = tex2D( _Sampler_01, In.vTexCoord_1 ).rgb;
		_var8 = _var8 * LIGHT_MAP_SCALE;
		_var2 = _var8;
#endif
	float _var9 = tex2D( _Sampler_02, _var0 ).a;
	_var3 = _var3 * g_cData_maskstrength;
	_var5 = CalcPixelFogFactor( PIXELFOGTYPE, _g_FogParams, _var5, _var6, _var7 );
	_var9 = _var9 * g_cData_warp_strength;
	float2 _var10 = g_cData_warp_amount * _var9;
	_var10 = _var10 * float( 0.012000 );
	_var10 = In.vTexCoord_0 + _var10;
	{
		float2 center_def = float2( 0.5f, 0.5f );
		float rot_def = float( 0.0f );
		float2 scale_def = float2( 1.0f, 1.0f );
		float fs = sin( rot_def );
		float fc = cos( rot_def );
		float4 row_0 = float4( fc * scale_def.x, -fs * scale_def.x, 0, ( -center_def.x * fc + center_def.y * fs ) * scale_def.x + center_def.x + _var1.x );
		float4 row_1 = float4( fs * scale_def.y, fc * scale_def.y, 0, ( -center_def.x * fs - center_def.y * fc ) * scale_def.y + center_def.y + _var1.y );
		_var1.x = dot( float4( _var10, 0, 1 ), row_0 );
		_var1.y = dot( float4( _var10, 0, 1 ), row_1 );
	}
	{
		float2 center_def = float2( 0.5f, 0.5f );
		float rot_def = float( 0.0f );
		float2 scale_def = float2( 1.0f, 1.0f );
		float fs = sin( rot_def );
		float fc = cos( rot_def );
		float4 row_0 = float4( fc * scale_def.x, -fs * scale_def.x, 0, ( -center_def.x * fc + center_def.y * fs ) * scale_def.x + center_def.x + _var4.x );
		float4 row_1 = float4( fs * scale_def.y, fc * scale_def.y, 0, ( -center_def.x * fs - center_def.y * fc ) * scale_def.y + center_def.y + _var4.y );
		_var4.x = dot( float4( _var10, 0, 1 ), row_0 );
		_var4.y = dot( float4( _var10, 0, 1 ), row_1 );
	}
	float4 _texLookup_44 = tex2D( _Sampler_03, _var1 );
	float _var11 = _texLookup_44.r;
	float _var12 = _texLookup_44.g;
	float _var13 = _texLookup_44.b;
	float _var14 = _texLookup_44.a;
	float _var15 = tex2D( _Sampler_04, _var4 ).g;
	_var11 = _var11 * g_cData_basetint_red;
	_var12 = _var12 * g_cData_basetint_green;
	_var13 = _var13 * g_cData_basetint_blue;
	_var15 = _var15 * g_cData_fogmaskoverlay_strength;
	float2 _var16 = float2( _var11, _var12 );
	_var3 = _var3 * _var15;
	float3 _var17 = float3( _var16, _var13 );
	_var17 = _var17 * _var2;
	float4 _var18 = float4( _var17, _var14 );
	_var18 = _var18 * _var3;
	_var18 = FinalOutput( _var18, _var5, PIXELFOGTYPE, TONEMAP_SCALE_LINEAR, false, 1.0f );
	Out.vColor_0 = _var18;
	return Out;
}