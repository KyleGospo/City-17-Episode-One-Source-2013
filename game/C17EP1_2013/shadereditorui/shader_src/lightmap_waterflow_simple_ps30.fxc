// ********************************
// ** auto generated pixelshader **
// ********************************

// Includes
#include "common_ps_fxc.h"
#include "common_vertexlitgeneric_dx9.h"
#include "common_lightmappedgeneric_fxc.h"
#include "common_flashlight_fxc.h"
#include "common_parallax.h"


// Combos
// DYNAMIC: "FLASHLIGHT"		"0..1"
// DYNAMIC: "FLASHLIGHTDEPTHFILTERMODE"		"0..2"
// DYNAMIC: "FLASHLIGHTSHADOWS"		"0..1"
// DYNAMIC: "PIXELFOGTYPE"		"0..1"
// DYNAMIC: "WRITEWATERFOGTODESTALPHA"		"0..1"

// Samplers
sampler _Sampler_00		: register( s0 );
sampler _Sampler_01		: register( s1 );
sampler _gSampler_Flashlight_Cookie		: register( s2 );
sampler _gSampler_Flashlight_Depth		: register( s3 );
sampler _gSampler_Flashlight_Random		: register( s4 );
sampler _Sampler_05		: register( s5 );
sampler _Sampler_06		: register( s6 );

// Constants
const float4x4 g_cFlashlightWorldToTexture		: register( c12 );
const float _g_Time		: register( c16 );
const float g_cData_flowspeed1		: register( c17 ); 		// Static
const float g_cData_flowspeed2		: register( c18 ); 		// Static
const float g_cData_flowvariation_size		: register( c19 ); 		// Static
const float4 _g_FogParams		: register( c20 );
const float3 _g_VecOrig		: register( c21 );
const float4 g_cFlashlightAttenuationFactors		: register( c8 );
const float4 g_cFlashlightPos		: register( c9 );
const float4 g_cShadowTweaks		: register( c7 );

// Arrays

// Semantic structures
struct PS_INPUT
{
	float2 vTexCoord_0			:	TEXCOORD0;
	float2 vTexCoord_1			:	TEXCOORD1;
	float3 vTexCoord_2			:	TEXCOORD2;
	float3 vTexCoord_3			:	TEXCOORD3;
	float4 vTexCoord_4			:	TEXCOORD4;
};

struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
};

// Entry point
PS_OUTPUT main( const PS_INPUT In )
{
	PS_OUTPUT Out;
	float3 _var0 = float3( 0.000000, 0.000000, 0.000000 );
	float2 _var1 = float2( 0.000000, 0.140000 ) * _g_Time;
	float2 _var2 = float2( 0.000000, 0.140000 ) * _g_Time;
	float _var3 = tex2D( _Sampler_00, In.vTexCoord_0 ).r;
	float2 _var4 = float2( 0.000000, 0.110000 ) * _g_Time;
	float _var5 = _g_VecOrig.z;
	float _var6 = In.vTexCoord_3.z;
	float _var7 = In.vTexCoord_4.z;
#if ( FLASHLIGHT == 0 )
		float3 _var8 = tex2D( _Sampler_01, In.vTexCoord_1 ).rgb;
		_var8 = _var8 * LIGHT_MAP_SCALE;
		_var0 = _var8;
#endif
#if ( FLASHLIGHT == 1 )
		float4 _var9 = mul( float4(In.vTexCoord_3.xyz,1), g_cFlashlightWorldToTexture );
		float2 _var10 = In.vTexCoord_4.xy;
		float _var11 = In.vTexCoord_4.w;
		_var10 = _var10 / _var11;
		_var10 = _var10 * float( 0.500000 );
		_var10 = _var10 + float( 0.500000 );
		float3 _var12 = DoFlashlight( g_cFlashlightPos.xyz, In.vTexCoord_3, _var9, In.vTexCoord_2,
				g_cFlashlightAttenuationFactors.xyz, g_cFlashlightAttenuationFactors.w,
				_gSampler_Flashlight_Cookie, _gSampler_Flashlight_Depth, _gSampler_Flashlight_Random,
				FLASHLIGHTDEPTHFILTERMODE, FLASHLIGHTSHADOWS, true,
				_var10, false, g_cShadowTweaks );
		_var0 = _var12;
#endif
	_var0 = _var0;
	_var1 = _var1 * g_cData_flowspeed1;
	_var2 = _var2 * g_cData_flowspeed2;
	_var4 = _var4 * g_cData_flowvariation_size;
	_var5 = CalcPixelFogFactor( PIXELFOGTYPE, _g_FogParams, _var5, _var6, _var7 );
	{
		float2 center_def = float2( 0.5f, 0.5f );
		float rot_def = float( 0.0f );
		float2 scale_def = float2( 1.0f, 1.0f );
		float fs = sin( rot_def );
		float fc = cos( rot_def );
		float4 row_0 = float4( fc * scale_def.x, -fs * scale_def.x, 0, ( -center_def.x * fc + center_def.y * fs ) * scale_def.x + center_def.x + _var1.x );
		float4 row_1 = float4( fs * scale_def.y, fc * scale_def.y, 0, ( -center_def.x * fs - center_def.y * fc ) * scale_def.y + center_def.y + _var1.y );
		_var1.x = dot( float4( In.vTexCoord_0, 0, 1 ), row_0 );
		_var1.y = dot( float4( In.vTexCoord_0, 0, 1 ), row_1 );
	}
	{
		float2 center_def = float2( 0.5f, 0.5f );
		float rot_def = float( 0.0f );
		float2 scale_def = float2( 1.0f, 1.0f );
		float fs = sin( rot_def );
		float fc = cos( rot_def );
		float4 row_0 = float4( fc * scale_def.x, -fs * scale_def.x, 0, ( -center_def.x * fc + center_def.y * fs ) * scale_def.x + center_def.x + _var2.x );
		float4 row_1 = float4( fs * scale_def.y, fc * scale_def.y, 0, ( -center_def.x * fs - center_def.y * fc ) * scale_def.y + center_def.y + _var2.y );
		_var2.x = dot( float4( In.vTexCoord_0, 0, 1 ), row_0 );
		_var2.y = dot( float4( In.vTexCoord_0, 0, 1 ), row_1 );
	}
	{
		float2 center_def = float2( 0.5f, 0.5f );
		float rot_def = float( 0.0f );
		float fs = sin( rot_def );
		float fc = cos( rot_def );
		float4 row_0 = float4( fc * float2( 1.500000, 1.500000 ).x, -fs * float2( 1.500000, 1.500000 ).x, 0, ( -center_def.x * fc + center_def.y * fs ) * float2( 1.500000, 1.500000 ).x + center_def.x + _var4.x );
		float4 row_1 = float4( fs * float2( 1.500000, 1.500000 ).y, fc * float2( 1.500000, 1.500000 ).y, 0, ( -center_def.x * fs - center_def.y * fc ) * float2( 1.500000, 1.500000 ).y + center_def.y + _var4.y );
		_var4.x = dot( float4( In.vTexCoord_0, 0, 1 ), row_0 );
		_var4.y = dot( float4( In.vTexCoord_0, 0, 1 ), row_1 );
	}
	float3 _var13 = tex2D( _Sampler_05, _var1 ).rgb;
	float3 _var14 = tex2D( _Sampler_05, _var2 ).rgb;
	float _var15 = tex2D( _Sampler_06, _var4 ).b;
	_var13 = _var13 * _var14;
	_var3 = _var3 * _var15;
	_var0 = _var0 * _var13;
	float4 _var16 = float4( _var0, _var3 );
	_var16 = FinalOutput( _var16, _var5, PIXELFOGTYPE, TONEMAP_SCALE_LINEAR, false, 1.0f );
	Out.vColor_0 = _var16;
	return Out;
}