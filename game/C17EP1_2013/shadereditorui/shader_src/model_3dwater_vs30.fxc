// *********************************
// ** auto generated vertexshader **
// *********************************

// Includes
#include "common_vs_fxc.h"


// Combos
// DYNAMIC: "SKINNING"		"0..1"

// Samplers

// Constants
const float3 g_cData_movement		: register( c48 ); 		// Static
const float3 g_cData_wind_dir		: register( c49 ); 		// Callback
const float g_cData_smallwindsize		: register( c50 ); 		// Static
const float _g_Time		: register( c51 );
const float g_cData_wind_speed		: register( c52 ); 		// Callback
const float g_cData_wind_strength_mul		: register( c53 ); 		// Static
const float g_cData_smallwindstrength		: register( c54 ); 		// Static
const float g_cData_largewindstrength		: register( c55 ); 		// Static
const float3 _g_VecOrig		: register( c56 );

// Arrays

// Semantic structures
struct VS_INPUT
{
	float3 vPos					:	POSITION;
	float4 vBoneWeights			:	BLENDWEIGHT;
	float4 vBoneIndices			:	BLENDINDICES;
	float3 vNormal				:	NORMAL;
	float4 vTangent_S			:	TANGENT;
	float2 vTexCoord_0			:	TEXCOORD0;
};

struct VS_OUTPUT
{
	float4 vProjPos				:	POSITION;
	float2 vTexCoord_0			:	TEXCOORD0;
	float3 vTexCoord_1			:	TEXCOORD1;
	float3 vTexCoord_2			:	TEXCOORD2;
	float4 vTexCoord_3			:	TEXCOORD3;
	float3 vTexCoord_4			:	TEXCOORD4;
	float3 vTexCoord_5			:	TEXCOORD5;
	float3 vTexCoord_6			:	TEXCOORD6;
};

// Entry point
VS_OUTPUT main( const VS_INPUT In )
{
	VS_OUTPUT Out;
	float _var0 = g_cData_movement.x;
	float3 _var1 = normalize( g_cData_wind_dir );
	float3 _var2 = (float3)0;
	float3 _var3 = (float3)0;
	float3 _var4 = (float3)0;
	float3 _var5 = (float3)0;
	SkinPositionNormalAndTangentSpace( SKINNING, float4( In.vPos, 1 ), In.vNormal, In.vTangent_S,
			In.vBoneWeights, In.vBoneIndices,
			_var2, _var3, _var4, _var5 );
	float _var6 = g_cData_movement.y;
	float _var7 = g_cData_wind_speed * g_cData_wind_strength_mul;
	float _var8 = length( g_cData_wind_dir );
	float _var9 = g_cData_movement.y;
	float3 _var10 = _var2 / float( 128.000000 );
	_var6 = float( 256.000000 ) * _var6;
	_var9 = _var9 * float( 0.750000 );
	_var3 = normalize( _var3 );
	float3 _var11 = _var2 - _g_VecOrig;
	_var4 = normalize( _var4 );
	_var5 = normalize( _var5 );
	float3 _var12 = frac( _var10 );
	_var9 = 1.0f - _var9;
	_var12 = _var12 * float( 20.000000 );
	float _var13 = _var12.x;
	float _var14 = _var12.y;
	_var13 = _var13 + _var14;
	_var13 = _g_Time + _var13;
	_var6 = _var6 + _var13;
	float _var15 = sin( _var13 );
	_var6 = g_cData_smallwindsize * _var6;
	_var15 = _var15 + float( 0.800000 );
	_var6 = _var6 * _var7;
	_var15 = clamp( _var15, float( 0.000000 ), float( 1.000000 ) );
	_var6 = 1.0f - _var6;
	_var15 = _var15 * _var15;
	float3 _var16 = _var6 * _var1;
	_var15 = 1.0f - _var15;
	float3 _var17 = _var16 * float( 0.500000 );
	float3 _var18 = _var16 * float( 0.250000 );
	_var15 = _var15 * _var15;
	_var17 = _var10 + _var17;
	_var18 = _var10 + _var18;
	_var15 = _var15 * float( 0.500000 );
	_var17 = _var1 * _var17;
	_var18 = _var1 * _var18;
	_var15 = 1.0f - _var15;
	_var17 = _var17 / g_cData_smallwindsize;
	_var18 = sin( _var18 );
	_var17 = sin( _var17 );
	float _var19 = length( _var18 );
	float _var20 = length( _var17 );
	float3 _var21 = _var18 + _var19;
	float3 _var22 = _var17 + _var20;
	_var21 = _var21 * _var8;
	_var22 = _var22 * _var8;
	_var21 = _var21 * g_cData_largewindstrength;
	_var22 = _var22 * g_cData_smallwindstrength;
	_var21 = _var9 * _var21;
	_var22 = _var0 * _var22;
	_var22 = _var22 + _var21;
	_var22 = _var22 * _var15;
	_var22 = _var22 + _var2;
	float4 _var23 = mul( float4(_var22.xyz,1), cViewProj );
	Out.vProjPos = _var23;
	Out.vTexCoord_0 = In.vTexCoord_0;
	Out.vTexCoord_1 = _var22;
	Out.vTexCoord_2 = _var3;
	Out.vTexCoord_3 = _var23;
	Out.vTexCoord_4 = _var11;
	Out.vTexCoord_5 = _var4;
	Out.vTexCoord_6 = _var5;
	return Out;
}