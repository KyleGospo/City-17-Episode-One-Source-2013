// ********************************
// ** auto generated pixelshader **
// ********************************


// Includes
#include "common_ps_fxc.h"
#include "common_vertexlitgeneric_dx9.h"
#include "common_lightmappedgeneric_fxc.h"
#include "common_flashlight_fxc.h"
#include "common_parallax.h"


// Samplers
sampler _Sampler_00		: register( s0 );
sampler _Sampler_01		: register( s1 );
sampler _Sampler_02		: register( s2 );
sampler _Sampler_03		: register( s3 );
sampler _Sampler_04		: register( s4 );
sampler _Sampler_05		: register( s5 );
sampler _Sampler_06		: register( s6 );

// Constants
const float _g_Time		: register( c16 );
const float2 g_cData_warp_directions		: register( c17 ); 		// Static
const float g_cData_refraction_warp_power		: register( c18 ); 		// Static
const float4x4 g_cCMatrix_ViewProj		: register( c19 );
const float g_cData_refraction_power		: register( c23 ); 		// Static
const float2 g_cData_refraction_vectors		: register( c24 ); 		// Static
const float g_cData_chromatic_tint_r		: register( c25 ); 		// Static
const float3 g_cData_refraction_tint		: register( c26 ); 		// Static
const float3 g_cData_envmap_power		: register( c27 ); 		// Static

// Semantic structures
struct PS_INPUT
{
	float2 vTexCoord_0			:	TEXCOORD0;
	float3 vTexCoord_1			:	TEXCOORD1;
	float3 vTexCoord_2			:	TEXCOORD2;
	float4 vTexCoord_3			:	TEXCOORD3;
	float3 vTexCoord_4			:	TEXCOORD4;
	float3 vTexCoord_5			:	TEXCOORD5;
};

struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
};

// Entry point
PS_OUTPUT main( const PS_INPUT In )
{
	PS_OUTPUT Out;
	float2 _var0 = In.vTexCoord_3.xy;
	float _var1 = In.vTexCoord_3.w;
	float4 _texLookup_51 = tex2D( _Sampler_00, In.vTexCoord_0 );
	float3 _var2 = _texLookup_51.rgb;
	float _var3 = _texLookup_51.a;
	float2 _var4 = _g_Time * g_cData_warp_directions;
	float _var5 = tex2D( _Sampler_01, In.vTexCoord_0 ).r;
	float _var6 = tex2D( _Sampler_02, In.vTexCoord_0 ).a;
	float3x3 _var7 = { In.vTexCoord_4,
				In.vTexCoord_5,
				In.vTexCoord_1 };
	float3 _var8 = normalize( In.vTexCoord_2 );
	float3 _var9 = pow( g_cData_refraction_tint, float( 2.000000 ) );
	float _var10 = In.vTexCoord_3.z;
	_var0 = _var0 / _var1;
	_var2 = lerp( float3( 0.500000, 0.500000, 1.000000 ), _var2, float( 1.000000 ) );
	{
		float2 center_def = float2( 0.5f, 0.5f );
		float rot_def = float( 0.0f );
		float2 scale_def = float2( 1.0f, 1.0f );
		float fs = sin( rot_def );
		float fc = cos( rot_def );
		float4 row_0 = float4( fc * scale_def.x, -fs * scale_def.x, 0, ( -center_def.x * fc + center_def.y * fs ) * scale_def.x + center_def.x + _var4.x );
		float4 row_1 = float4( fs * scale_def.y, fc * scale_def.y, 0, ( -center_def.x * fs - center_def.y * fc ) * scale_def.y + center_def.y + _var4.y );
		_var4.x = dot( float4( In.vTexCoord_0, 0, 1 ), row_0 );
		_var4.y = dot( float4( In.vTexCoord_0, 0, 1 ), row_1 );
	}
	float _var11 = _var6 * _var5;
	_var10 = smoothstep( float( 1.000000 ), float( 2.500000 ), _var10 );
	_var0 = _var0 * float2( 0.500000, -0.500000 );
	float4 _texLookup_66 = tex2D( _Sampler_03, _var4 );
	float _var12 = _texLookup_66.g;
	float _var13 = _texLookup_66.b;
	_var10 = float( 0.800000 ) * _var10;
	_var0 = _var0 + float( 0.500000 );
	_var12 = _var12 * float( 1.400000 );
	_var12 = lerp( _var12, _var13, _var5 );
	_var12 = float( 1.400000 ) * _var12;
	float2 _var14 = float2( 1.000000, 2.000000 ) * _var12;
	_var14 = _var14 * g_cData_refraction_warp_power;
	_var14 = In.vTexCoord_0 + _var14;
	float3 _var15 = tex2D( _Sampler_04, _var14 ).rgb;
	float3 _var16 = _var11 * _var15;
	_var2 = lerp( _var2, _var15, _var16 );
	_var2 = _var2 * float( 2.000000 );
	_var2 = _var2 - float( 1.000000 );
	_var2 = mul( _var2, _var7 );
	_var2 = normalize( _var2 );
	float3 _var17 = mul( float4(_var2.xyz,1), (float3x3)g_cCMatrix_ViewProj );
	float _var18 = dot( _var2, _var8 );
	float3 _var19 = reflect( _var8, _var2 );
	float2 _var20 = _var17.xy;
	float _var21 = smoothstep( float( -0.050000 ), float( -0.100000 ), _var18 );
	float _var22 = abs( _var18 );
	float _var23 = smoothstep( float( -1.000000 ), float( 0.000000 ), _var18 );
	float3 _var24 = texCUBE( _Sampler_05, _var19 ).rgb;
	float _var25 = smoothstep( float( -1.000000 ), float( -0.500000 ), _var18 );
	float _var26 = smoothstep( float( 0.100000 ), float( -0.500000 ), _var18 );
	_var21 = _var21 * g_cData_refraction_power;
	_var22 = 1.0f - _var22;
	float _var27 = pow( _var23, float( 2.000000 ) );
	_var24 = _var24 * ENV_MAP_SCALE;
	_var25 = min( _var25, _var26 );
	float _var28 = pow( _var23, float( 20.000000 ) );
	_var20 = _var20 * _var21;
	_var22 = _var22 * float( 0.100000 );
	float3 _var29 = lerp( float( 1.000000 ), float3( 0.830000, 0.867400, 1.000000 ), _var27 );
	_var24 = _var24 * g_cData_envmap_power;
	_var25 = _var25 * float( 0.250000 );
	_var28 = _var28 * float( 0.150000 );
	_var20 = _var20 * g_cData_refraction_vectors;
	float _var30 = g_cData_chromatic_tint_r + _var22;
	float _var31 = float( 0.005000 ) + _var22;
	float _var32 = float( 0.007000 ) + _var22;
	_var24 = _var24 * _var3;
	_var30 = float( 0.300000 ) * _var30;
	_var31 = float( 0.300000 ) * _var31;
	_var32 = float( 0.300000 ) * _var32;
	float2 _var33 = _var20 * _var30;
	float2 _var34 = _var20 * _var31;
	float2 _var35 = _var20 * _var32;
	_var33 = _var0 - _var33;
	_var34 = _var0 - _var34;
	_var35 = _var0 - _var35;
	float _var36 = tex2D( _Sampler_06, _var33 ).r;
	float _var37 = tex2D( _Sampler_06, _var34 ).g;
	float _var38 = tex2D( _Sampler_06, _var35 ).b;
	float2 _var39 = float2( _var36, _var37 );
	float3 _var40 = float3( _var39, _var38 );
	_var40 = _var40 * _var29;
	_var40 = _var40 + _var9;
	_var40 = lerp( _var40, _var24, _var25 );
	_var40 = lerp( _var40, float( 1.000000 ), _var28 );
	float4 _var41 = float4( _var40, _var10 );
	_var41 = _var41 * _var6;
	Out.vColor_0 = _var41;
	return Out;
}