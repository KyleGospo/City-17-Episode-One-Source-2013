// ********************************
// ** auto generated pixelshader **
// ********************************

// Includes
#include "common_ps_fxc.h"
#include "common_vertexlitgeneric_dx9.h"
#include "common_lightmappedgeneric_fxc.h"
#include "common_flashlight_fxc.h"
#include "common_parallax.h"


// Combos
// DYNAMIC: "NUM_LIGHTS"		"0..4"
// DYNAMIC: "PIXELFOGTYPE"		"0..1"
// STATIC: "FLASHLIGHT"		"0..1"
// DYNAMIC: "WRITEWATERFOGTODESTALPHA"		"0..1"

// Samplers
sampler _Sampler_00		: register( s0 );

// Constants
const float4 _g_FogParams		: register( c16 );
const float3 _g_VecOrig		: register( c17 );
const float3 g_cAmbientCube[6]		: register( c0 );
PixelShaderLightInfo g_cLightInfo[3]		: register( c6 );

// Arrays

// Semantic structures
struct PS_INPUT
{
	float2 vTexCoord_0			:	TEXCOORD0;
	float3 vTexCoord_1			:	TEXCOORD1;
	float3 vTexCoord_2			:	TEXCOORD2;
	float4 vTexCoord_3			:	TEXCOORD3;
	float4 vTexCoord_4			:	TEXCOORD4;
	float4 vColor_0				:	COLOR0;
};

struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
};

// Entry point
PS_OUTPUT main( const PS_INPUT In )
{
	PS_OUTPUT Out;
	float4 _texLookup_21 = tex2D( _Sampler_00, In.vTexCoord_0 );
	float3 _var0 = _texLookup_21.rgb;
	float _var1 = _texLookup_21.a;
	float3 _var2 = float3( 0.050000, 0.050000, 0.050000 );
	float _var3 = _g_VecOrig.z;
	float _var4 = In.vTexCoord_1.z;
	float _var5 = In.vTexCoord_3.z;
	float3 _var6 = PixelShaderDoLighting( In.vTexCoord_1, In.vTexCoord_2, float3(0,0,0),
			false, true, In.vColor_0,
			g_cAmbientCube, NUM_LIGHTS, g_cLightInfo,
			false, false, 1.0f );
	float3 _var7 = float3( 0.000000, 0.000000, 0.000000 );
	_var3 = CalcPixelFogFactor( PIXELFOGTYPE, _g_FogParams, _var3, _var4, _var5 );
#if ( FLASHLIGHT == 0 )
		_var7 = normalize( PixelShaderGetLightVector( float2(0,0), g_cLightInfo, 0 ) );
#endif
#if ( FLASHLIGHT == 1 )
		float3 _var8 = In.vTexCoord_4.xyz;
		_var8 = normalize( _var8 );
		_var7 = _var8;
#endif
	_var7 = _var7;
	float _var9 = dot( _var7, In.vTexCoord_2 );
	_var9 = clamp( _var9, float( 0.000000 ), float( 1.000000 ) );
	if ( _var9 > float( 0.000000 ) )
	{
		_var2 = _var2 + float3( 0.100000, 0.100000, 0.100000 );
		if ( _var9 > float( 0.050000 ) )
		{
			_var2 = _var2 + float3( 0.250000, 0.250000, 0.250000 );
			if ( _var9 > float( 0.500000 ) )
			{
				_var2 = _var2 + float3( 0.350000, 0.350000, 0.350000 );
				if ( _var9 > float( 0.950000 ) )
				{
					_var2 = _var2 + float3( 0.250000, 0.250000, 0.250000 );
				}
			}
		}
	}
	_var0 = _var0 * _var2;
	float4 _var10 = float4( _var0, _var1 );
	_var10 = FinalOutput( _var10, _var3, PIXELFOGTYPE, TONEMAP_SCALE_LINEAR, true, _var5 );
	Out.vColor_0 = _var10;
	return Out;
}