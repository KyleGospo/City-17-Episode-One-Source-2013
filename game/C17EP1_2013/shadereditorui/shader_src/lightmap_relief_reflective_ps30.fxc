// ********************************
// ** auto generated pixelshader **
// ********************************

// Includes
#include "common_ps_fxc.h"
#include "common_vertexlitgeneric_dx9.h"
#include "common_lightmappedgeneric_fxc.h"
#include "common_flashlight_fxc.h"
#include "common_parallax.h"


// Combos
// DYNAMIC: "FLASHLIGHT"		"0..1"
// DYNAMIC: "FLASHLIGHTSHADOWS"		"0..1"
// DYNAMIC: "FLASHLIGHTDEPTHFILTERMODE"		"0..2"
// DYNAMIC: "PIXELFOGTYPE"		"0..1"
// DYNAMIC: "WRITEWATERFOGTODESTALPHA"		"0..1"

// Samplers
sampler _Sampler_00		: register( s0 );
sampler _Sampler_01		: register( s1 );
sampler _Sampler_02		: register( s2 );
sampler _Sampler_03		: register( s3 );
sampler _Sampler_04		: register( s4 );
sampler _gSampler_Flashlight_Cookie		: register( s5 );
sampler _gSampler_Flashlight_Depth		: register( s6 );
sampler _gSampler_Flashlight_Random		: register( s7 );

// Constants
const float3 _g_VecOrig		: register( c16 );
const float g_cData_parallax_height		: register( c17 ); 		// Static
const float4x4 g_cFlashlightWorldToTexture		: register( c12 );
const float4x4 g_cCMatrix_ViewProj		: register( c18 );
const float4 g_cFlashlightAttenuationFactors		: register( c8 );
const float4 g_cFlashlightPos		: register( c9 );
const float4 g_cShadowTweaks		: register( c7 );
const float3 g_cData_envmaptint		: register( c22 ); 		// Static
const float4 _g_FogParams		: register( c23 );

// Arrays

// Semantic structures
struct PS_INPUT
{
	float2 vTexCoord_0			:	TEXCOORD0;
	float4 vTexCoord_1			:	TEXCOORD1;
	float3 vTexCoord_2			:	TEXCOORD2;
	float3 vTexCoord_3			:	TEXCOORD3;
	float2 vTexCoord_4			:	TEXCOORD4;
	float3 vTexCoord_5			:	TEXCOORD5;
	float3 vTexCoord_6			:	TEXCOORD6;
};

struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
	float vDepth				:	DEPTH;
};

// Entry point
PS_OUTPUT main( const PS_INPUT In )
{
	PS_OUTPUT Out;
	float3 _var0 = float3( 0.000000, 0.000000, 0.000000 );
	float2 _var1 = float2( 0.000000, 0.000000 );
	float3x3 _var2 = { In.vTexCoord_5,
				In.vTexCoord_6,
				In.vTexCoord_2 };
	float3 _var3 = In.vTexCoord_3 - _g_VecOrig;
	float3 _var4 = _g_VecOrig - In.vTexCoord_3;
	float3 _var5 = float3( 0.000000, 0.000000, 0.000000 );
	float _var6 = _g_VecOrig.z;
	float3 _var7 = mul( _var2, _var3 );
	float3 _var8 = normalize( _var3 );
#if ( FLASHLIGHT == 0 )
		float3 _var10 = (float3)0;
		float2 _var9 = CalcParallaxUV_Relief( In.vTexCoord_0, _var7, g_cData_parallax_height, In.vTexCoord_2, _var4,
				_Sampler_00, 12, 24, 5, In.vTexCoord_3,
				_var10, true, true );
		_var5 = _var10;
		_var1 = _var9;
#endif
#if ( FLASHLIGHT == 1 )
		float3 _var12 = (float3)0;
		float2 _var11 = CalcParallaxUV_Relief( In.vTexCoord_0, _var7, g_cData_parallax_height, In.vTexCoord_2, _var4,
				_Sampler_00, 8, 15, 5, In.vTexCoord_3,
				_var12, false, true );
		_var12 = _var12 * float( 0.900000 );
		_var1 = _var11;
		_var5 = _var12;
#endif
	_var1 = _var1;
	_var5 = _var5;
	float4 _texLookup_58 = tex2D( _Sampler_01, _var1 );
	float3 _var13 = _texLookup_58.rgb;
	float _var14 = _texLookup_58.a;
	float _var15 = _var5.x;
	float _var16 = _var5.y;
	float _var17 = _var5.z;
	float3 _var18 = tex2D( _Sampler_02, _var1 ).rgb;
	_var13 = _var13 * float( 2.000000 );
	float3 _var19 = _var15 * In.vTexCoord_5;
	float3 _var20 = _var16 * In.vTexCoord_6;
	float _var21 = _var17 * g_cData_parallax_height;
	float _var22 = 1.0f - _var17;
	_var13 = _var13 - float( 1.000000 );
	_var19 = _var19 + _var20;
	float3 _var23 = _var21 * In.vTexCoord_2;
	_var22 = _var22 * _var22;
#if ( FLASHLIGHT == 0 )
		float2 _var24 = In.vTexCoord_1.xy;
		float _var25 = dot( _var13, bumpBasis[0] );
		float _var26 = dot( _var13, bumpBasis[1] );
		float _var27 = dot( _var13, bumpBasis[2] );
		float2 _var28 = In.vTexCoord_1.zw;
		float3 _var29 = tex2D( _Sampler_03, In.vTexCoord_4 ).rgb;
		float3 _var30 = lerp( _var13, In.vTexCoord_2, float( 0.900000 ) );
		float3 _var31 = tex2D( _Sampler_03, _var24 ).rgb;
		_var25 = saturate( _var25 );
		_var26 = saturate( _var26 );
		_var27 = saturate( _var27 );
		float3 _var32 = tex2D( _Sampler_03, _var28 ).rgb;
		_var30 = reflect( _var3, _var30 );
		float2 _var33 = float2( _var25, _var26 );
		float3 _var34 = texCUBE( _Sampler_04, _var30 ).rgb;
		float3 _var35 = float3( _var33, _var27 );
		_var34 = _var34 * float( 1.000000 );
		_var35 = _var35 * _var35;
		_var34 = _var34 * ENV_MAP_SCALE;
		float _var36 = _var35.x;
		float _var37 = _var35.y;
		float _var38 = _var35.z;
		float _var39 = dot( float3( float( 1.000000 ), float( 1.000000 ), float( 1.000000 ) ), _var35 );
		_var34 = _var34 * _var14;
		_var31 = _var31 * _var36;
		_var32 = _var32 * _var37;
		_var29 = _var29 * _var38;
		_var39 = LIGHT_MAP_SCALE / _var39;
		_var34 = _var34 * g_cData_envmaptint;
		_var31 = _var31 + _var32;
		_var0 = _var34;
		_var31 = _var31 + _var29;
		_var31 = _var31 * _var39;
		_var0 = _var31;
#endif
	_var19 = _var19 + _var23;
	float3 _var40 = mul( _var13, _var2 );
	_var18 = _var18 * _var22;
	_var19 = In.vTexCoord_3 - _var19;
	_var40 = normalize( _var40 );
	float4 _var41 = mul( float4(_var19.xyz,1), g_cCMatrix_ViewProj );
	float _var42 = _var19.z;
#if ( FLASHLIGHT == 1 )
		float4 _var43 = mul( float4(_var19.xyz,1), g_cFlashlightWorldToTexture );
		float2 _var44 = _var41.xy;
		float _var45 = _var41.w;
		_var44 = _var44 / _var45;
		_var44 = _var44 * float( 0.500000 );
		_var44 = _var44 + float( 0.500000 );
		_var40 = DoFlashlight( g_cFlashlightPos.xyz, _var19, _var43, _var40,
				g_cFlashlightAttenuationFactors.xyz, g_cFlashlightAttenuationFactors.w,
				_gSampler_Flashlight_Cookie, _gSampler_Flashlight_Depth, _gSampler_Flashlight_Random,
				FLASHLIGHTDEPTHFILTERMODE, FLASHLIGHTSHADOWS, true,
				_var44, false, g_cShadowTweaks );
		float3 _var46 = _var40;
#if ( FLASHLIGHTSHADOWS == 1 )
			float _var47 = dot( float3( float( 1.000000 ), float( 1.000000 ), float( 1.000000 ) ), _var40 );
			if ( _var47 > float( 0.010000 ) )
			{
				float3 _var48 = _var19 - float3( g_cFlashlightPos.xyz );
				_var48 = mul( _var2, _var48 );
				_var48 = normalize( _var48 );
				float _var49 = CalcParallaxedShadows_OneLight( In.vTexCoord_0, _var1, _var48,
						In.vTexCoord_3, g_cData_parallax_height, float( 1.000000 ), _Sampler_00 );
				_var46 = _var46 * _var49;
			}
#endif
		_var0 = _var46;
#endif
	_var0 = _var0;
	float _var50 = _var41.z;
	float _var51 = _var41.z;
	float _var52 = _var41.w;
	_var0 = _var0 * _var18;
	_var6 = CalcPixelFogFactor( PIXELFOGTYPE, _g_FogParams, _var6, _var42, _var50 );
	_var51 = _var51 / _var52;
	_var0 = _var0 + _var0;
	_var51 = saturate( _var51 );
	float4 _var53 = float4( _var0.x, _var0.y, _var0.z, 1.000000 );
	_var53 = FinalOutput( _var53, _var6, PIXELFOGTYPE, TONEMAP_SCALE_LINEAR, true, _var50 );
	Out.vColor_0 = _var53;
	Out.vDepth = _var51;
	return Out;
}