// ********************************
// ** auto generated pixelshader **
// ********************************

// Combos
// DYNAMIC: "PIXELFOGTYPE"		"0..1"
// STATIC: "FLASHLIGHT"		"0..1"
// DYNAMIC: "FLASHLIGHTDEPTHFILTERMODE"		"0..2"
// DYNAMIC: "FLASHLIGHTSHADOWS"		"0..1"
// DYNAMIC: "NUM_LIGHTS"		"0..4"
// DYNAMIC: "WRITEWATERFOGTODESTALPHA"		"0..1"

// Includes
#include "common_ps_fxc.h"
#include "common_vertexlitgeneric_dx9.h"
#include "common_lightmappedgeneric_fxc.h"
#include "common_flashlight_fxc.h"
#include "common_parallax.h"


// Samplers
sampler _Sampler_00		: register( s0 );
sampler _Sampler_01		: register( s1 );
sampler _Sampler_02		: register( s2 );
sampler _Sampler_03		: register( s3 );
sampler _Sampler_04		: register( s4 );
sampler _Sampler_05		: register( s5 );
sampler _Sampler_06		: register( s6 );
sampler _Sampler_07		: register( s7 );
sampler _gSampler_Flashlight_Cookie		: register( s8 );
sampler _gSampler_Flashlight_Depth		: register( s9 );
sampler _gSampler_Flashlight_Random		: register( s10 );
sampler _Sampler_11		: register( s11 );

// Constants
const float2 g_cData_overlay_scale		: register( c16 ); 		// Static
const float2 g_cData_overlay_maskscale		: register( c17 ); 		// Static
const float g_cData_overlay_strength		: register( c18 ); 		// Static
const float3 g_cData_overlay_slopebias		: register( c19 ); 		// Static
const float g_cData_phong_strength		: register( c20 ); 		// Static
const float g_cData_detailtexture_strength		: register( c21 ); 		// Static
const float2 g_cData_detailtexture_scale		: register( c22 ); 		// Static
const float2 g_cData_rim_boost_exp		: register( c23 ); 		// Static
const float3 g_cData_rim_color		: register( c24 ); 		// Static
const float g_cData_rim_scale		: register( c25 ); 		// Static
const float3 g_cData_envmap_strength		: register( c26 ); 		// Static
const float4 _g_FogParams		: register( c27 );
const float3 _g_VecOrig		: register( c28 );
const float4 g_cFlashlightAttenuationFactors		: register( c8 );
const float4 g_cFlashlightPos		: register( c9 );
const float4 g_cShadowTweaks		: register( c7 );
const float3 g_cAmbientCube[6]		: register( c0 );
PixelShaderLightInfo g_cLightInfo[3]		: register( c6 );

// Semantic structures
struct PS_INPUT
{
	float2 vTexCoord_0			:	TEXCOORD0;
	float3 vTexCoord_1			:	TEXCOORD1;
	float3 vTexCoord_2			:	TEXCOORD2;
	float4 vTexCoord_3			:	TEXCOORD3;
	float4 vTexCoord_4			:	TEXCOORD4;
	float3 vTexCoord_5			:	TEXCOORD5;
	float3 vTexCoord_6			:	TEXCOORD6;
	float3 vTexCoord_7			:	TEXCOORD7;
	float4 vColor_0				:	COLOR0;
};

struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
};

// Entry point
PS_OUTPUT main( const PS_INPUT In )
{
	PS_OUTPUT Out;
	float3 _var0 = float3( 0.000000, 0.000000, 0.000000 );
	float4 _texLookup_39 = tex2D( _Sampler_00, In.vTexCoord_0 );
	float3 _var1 = _texLookup_39.rgb;
	float _var2 = _texLookup_39.a;
	float2 _var3 = In.vTexCoord_0 * g_cData_overlay_scale;
	float2 _var4 = In.vTexCoord_0 * g_cData_overlay_maskscale;
	float _var5 = dot( In.vTexCoord_1, g_cData_overlay_slopebias );
	float3x3 _var6 = { In.vTexCoord_5,
				In.vTexCoord_6,
				In.vTexCoord_1 };
	float3 _var7 = normalize( In.vTexCoord_7 );
	float _var8 = tex2D( _Sampler_01, In.vTexCoord_0 ).r;
	float _var9 = tex2D( _Sampler_02, In.vTexCoord_0 ).r;
	float2 _var10 = In.vTexCoord_0 * g_cData_detailtexture_scale;
	float4 _texLookup_49 = tex2D( _Sampler_03, In.vTexCoord_0 );
	float3 _var11 = _texLookup_49.rgb;
	float _var12 = _texLookup_49.a;
	float3 _var13 = float3( 0.000000, 0.000000, 0.000000 );
	float _var14 = _g_VecOrig.z;
	float _var15 = In.vTexCoord_2.z;
	float _var16 = In.vTexCoord_4.z;
	float4 _texLookup_55 = tex2D( _Sampler_04, _var3 );
	float3 _var17 = _texLookup_55.rgb;
	float _var18 = _texLookup_55.a;
	float _var19 = tex2D( _Sampler_05, _var4 ).r;
	float4 _texLookup_58 = tex2D( _Sampler_06, _var3 );
	float4 _var20 = _texLookup_58.rgba;
	float3 _var21 = _texLookup_58.rgb;
	float3 _var22 = _var7 * float( -1.000000 );
	float _var23 = 1.0f - _var8;
	float _var24 = _var8 * float( 150.000000 );
	float _var25 = _var2 * g_cData_phong_strength;
	float3 _var26 = tex2D( _Sampler_07, _var10 ).rgb;
	float _var27 = _var2 * float( 0.800000 );
	_var14 = CalcPixelFogFactor( PIXELFOGTYPE, _g_FogParams, _var14, _var15, _var16 );
	_var19 = _var19 * g_cData_overlay_strength;
	float _var28 = _var20.w;
	_var23 = _var23 + _var24;
	_var26 = smoothstep( float( -0.500000 ), g_cData_detailtexture_strength, _var26 );
	_var21 = _var21 * float( 1.500000 );
	_var17 = _var17 * _var19;
	float _var29 = pow( _var28, float( 10.000000 ) );
	float _var30 = _var28 * float( 0.500000 );
	_var26 = _var26 * _var11;
	_var21 = _var21 * _var19;
	_var18 = _var18 * _var19;
	_var17 = _var1 + _var17;
	float _var31 = min( _var5, _var29 );
	float _var32 = max( _var5, _var29 );
	_var30 = _var30 + float( 0.500000 );
	_var21 = _var26 + _var21;
	_var18 = _var18 * float( 0.800000 );
	_var17 = normalize( _var17 );
	_var31 = lerp( _var31, _var32, _var5 );
	_var18 = _var27 + _var18;
	_var31 = smoothstep( float( 0.100000 ), float( 1.000000 ), _var31 );
	_var31 = min( _var31, _var30 );
	_var17 = lerp( _var1, _var17, _var31 );
	_var21 = lerp( _var26, _var21, _var31 );
	_var18 = lerp( _var27, _var18, _var31 );
	_var17 = _var17 * float( 2.000000 );
	_var17 = _var17 - float( 1.000000 );
	_var17 = normalize( _var17 );
	_var17 = mul( _var17, _var6 );
	_var17 = normalize( _var17 );
	float _var33 = dot( _var17, _var22 );
	_var33 = abs( _var33 );
	_var33 = 1.0f - _var33;
	float _var34 = pow( _var33, float( 3.000000 ) );
	_var25 = max( _var34, _var25 );
#if ( FLASHLIGHT == 1 )
		float2 _var35 = In.vTexCoord_4.xy;
		float _var36 = In.vTexCoord_4.w;
		_var35 = _var35 / _var36;
		float3 _var37 = (float3)0;
		float3 _var38 = (float3)0;
		DoSpecularFlashlight( g_cFlashlightPos.xyz, In.vTexCoord_2, In.vColor_0, _var17,
				g_cFlashlightAttenuationFactors.xyz, g_cFlashlightAttenuationFactors.w,
				_gSampler_Flashlight_Cookie, _gSampler_Flashlight_Depth, _gSampler_Flashlight_Random,
				FLASHLIGHTDEPTHFILTERMODE, FLASHLIGHTSHADOWS, true,
				_var35, _var23, _var22, _var25, g_cShadowTweaks,
				_var37, _var38 );
		_var0 = _var37;
		_var13 = _var38;
#endif
#if ( FLASHLIGHT == 0 )
		float3 _var39 = (float3)0;
		PixelShaderDoSpecularLighting( In.vTexCoord_2, _var17, _var23, _var22,
				In.vTexCoord_3, NUM_LIGHTS, g_cLightInfo,
				true, _var9, _var25, _var39 );
		float _var40 = g_cData_rim_boost_exp.y;
		float3 _var41 = PixelShaderDoLighting( In.vTexCoord_2, _var17, float3(0,0,0),
				false, true, In.vTexCoord_3,
				g_cAmbientCube, NUM_LIGHTS, g_cLightInfo,
				true, true, _var9 );
		_var40 = pow( _var33, _var40 );
		_var0 = _var41;
		float3 _var42 = _var40 * g_cData_rim_color;
		_var42 = _var42 * g_cData_rim_scale;
		_var39 = max( _var39, _var42 );
		_var13 = _var39;
#endif
	_var0 = _var0;
	_var13 = _var13;
	_var0 = _var0 * _var21;
	_var0 = _var0 + _var13;
#if ( FLASHLIGHT == 0 )
		float3 _var43 = reflect( _var7, _var17 );
		float3 _var44 = texCUBE( _Sampler_11, _var43 ).rgb;
		_var44 = _var44 * ENV_MAP_SCALE;
		_var44 = _var44 * _var18;
		_var44 = _var34 * _var44;
		_var44 = _var44 * g_cData_envmap_strength;
		_var0 = _var0 + _var44;
#endif
	float4 _var45 = float4( _var0, _var12 );
	_var45 = FinalOutput( _var45, _var14, PIXELFOGTYPE, TONEMAP_SCALE_LINEAR, true, _var16 );
	Out.vColor_0 = _var45;
	return Out;
}