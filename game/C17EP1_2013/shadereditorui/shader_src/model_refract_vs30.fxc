// *********************************
// ** auto generated vertexshader **
// *********************************

// Includes
#include "common_vs_fxc.h"


// Combos
// DYNAMIC: "SKINNING"		"0..1"

// Samplers

// Constants
const float3 _g_VecOrig		: register( c48 );

// Semantic structures
struct VS_INPUT
{
	float3 vPos					:	POSITION;
	float4 vBoneWeights			:	BLENDWEIGHT;
	float4 vBoneIndices			:	BLENDINDICES;
	float3 vNormal				:	NORMAL;
	float4 vTangent_S			:	TANGENT;
	float2 vTexCoord_0			:	TEXCOORD0;
};

struct VS_OUTPUT
{
	float4 vProjPos				:	POSITION;
	float2 vTexCoord_0			:	TEXCOORD0;
	float4x4 vTexCoord_1		:	TEXCOORD1;
	float4 vTexCoord_5			:	TEXCOORD5;
	float3 vTexCoord_6			:	TEXCOORD6;
	float3 vTexCoord_7			:	TEXCOORD7;
	float3 vColor_0				:	COLOR0;
	float3 vColor_1				:	COLOR1;
};

// Entry point
VS_OUTPUT main( const VS_INPUT In )
{
	VS_OUTPUT Out;
	float3 _var0 = (float3)0;
	float3 _var1 = (float3)0;
	float3 _var2 = (float3)0;
	float3 _var3 = (float3)0;
	SkinPositionNormalAndTangentSpace( SKINNING, float4( In.vPos, 1 ), In.vNormal, In.vTangent_S,
			In.vBoneWeights, In.vBoneIndices,
			_var0, _var1, _var2, _var3 );
	float4 _var4 = mul( float4(_var0.xyz,1), cViewProj );
	float3 _var5 = _var0 - _g_VecOrig;
	_var1 = normalize( _var1 );
	_var2 = normalize( _var2 );
	_var3 = normalize( _var3 );
	Out.vProjPos = _var4;
	Out.vTexCoord_0 = In.vTexCoord_0;
	Out.vTexCoord_1 = cViewProj;
	Out.vTexCoord_5 = _var4;
	Out.vTexCoord_6 = _var5;
	Out.vTexCoord_7 = _var1;
	Out.vColor_0 = _var2;
	Out.vColor_1 = _var3;
	return Out;
}