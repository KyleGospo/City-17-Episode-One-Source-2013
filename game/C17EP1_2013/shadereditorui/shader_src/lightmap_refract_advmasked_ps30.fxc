// ********************************
// ** auto generated pixelshader **
// ********************************


// Includes
#include "common_ps_fxc.h"
#include "common_vertexlitgeneric_dx9.h"
#include "common_lightmappedgeneric_fxc.h"
#include "common_flashlight_fxc.h"
#include "common_parallax.h"


// Samplers
sampler _Sampler_00		: register( s0 );
sampler _Sampler_01		: register( s1 );
sampler _Sampler_02		: register( s2 );
sampler _Sampler_03		: register( s3 );
sampler _Sampler_04		: register( s4 );
sampler _Sampler_05		: register( s5 );
sampler _Sampler_06		: register( s6 );
sampler _Sampler_07		: register( s7 );

// Constants
const float _g_Time		: register( c16 );
const float2 g_cData_refraction_flowmapscrollrate		: register( c17 ); 		// Static
const float g_cData_refraction_distortpower		: register( c18 ); 		// Static
const float2 g_cData_refraction_scroll		: register( c19 ); 		// Static
const float2 g_cData_refraction_distort_direction		: register( c20 ); 		// Static
const float g_cData_refraction_variationblendamount		: register( c21 ); 		// Static
const float4x4 g_cCMatrix_ViewProj		: register( c22 );
const float3 g_cData_envmap_strength		: register( c26 ); 		// Static

// Semantic structures
struct PS_INPUT
{
	float2 vTexCoord_0			:	TEXCOORD0;
	float3 vTexCoord_1			:	TEXCOORD1;
	float3 vTexCoord_2			:	TEXCOORD2;
	float4 vTexCoord_3			:	TEXCOORD3;
	float3 vTexCoord_4			:	TEXCOORD4;
	float3 vTexCoord_5			:	TEXCOORD5;
};

struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
};

// Entry point
PS_OUTPUT main( const PS_INPUT In )
{
	PS_OUTPUT Out;
	float2 _var0 = In.vTexCoord_3.xy;
	float _var1 = In.vTexCoord_3.w;
	float2 _var2 = _g_Time * g_cData_refraction_flowmapscrollrate;
	float2 _var3 = _g_Time * g_cData_refraction_scroll;
	float2 _var4 = _g_Time * g_cData_refraction_distort_direction;
	float3x3 _var5 = { In.vTexCoord_4,
				In.vTexCoord_5,
				In.vTexCoord_1 };
	float3 _var6 = normalize( In.vTexCoord_2 );
	float _var7 = tex2D( _Sampler_00, In.vTexCoord_0 ).r;
	float _var8 = GAMMA_LIGHT_SCALE * float( 2.500000 );
	float _var9 = In.vTexCoord_1.z;
	float _var10 = tex2D( _Sampler_01, In.vTexCoord_0 ).r;
	_var0 = _var0 / _var1;
	{
		float2 center_def = float2( 0.5f, 0.5f );
		float rot_def = float( 0.0f );
		float2 scale_def = float2( 1.0f, 1.0f );
		float fs = sin( rot_def );
		float fc = cos( rot_def );
		float4 row_0 = float4( fc * scale_def.x, -fs * scale_def.x, 0, ( -center_def.x * fc + center_def.y * fs ) * scale_def.x + center_def.x + _var2.x );
		float4 row_1 = float4( fs * scale_def.y, fc * scale_def.y, 0, ( -center_def.x * fs - center_def.y * fc ) * scale_def.y + center_def.y + _var2.y );
		_var2.x = dot( float4( In.vTexCoord_0, 0, 1 ), row_0 );
		_var2.y = dot( float4( In.vTexCoord_0, 0, 1 ), row_1 );
	}
	{
		float2 center_def = float2( 0.5f, 0.5f );
		float rot_def = float( 0.0f );
		float2 scale_def = float2( 1.0f, 1.0f );
		float fs = sin( rot_def );
		float fc = cos( rot_def );
		float4 row_0 = float4( fc * scale_def.x, -fs * scale_def.x, 0, ( -center_def.x * fc + center_def.y * fs ) * scale_def.x + center_def.x + _var4.x );
		float4 row_1 = float4( fs * scale_def.y, fc * scale_def.y, 0, ( -center_def.x * fs - center_def.y * fc ) * scale_def.y + center_def.y + _var4.y );
		_var4.x = dot( float4( In.vTexCoord_0, 0, 1 ), row_0 );
		_var4.y = dot( float4( In.vTexCoord_0, 0, 1 ), row_1 );
	}
	_var9 = smoothstep( float( -1.000000 ), float( 1.000000 ), _var9 );
	_var0 = _var0 * float2( 0.500000, -0.500000 );
	float4 _texLookup_60 = tex2D( _Sampler_02, _var2 );
	float _var11 = _texLookup_60.r;
	float _var12 = _texLookup_60.g;
	float _var13 = _texLookup_60.b;
	float _var14 = tex2D( _Sampler_03, _var4 ).g;
	_var9 = float( 0.900000 ) * _var9;
	_var0 = _var0 + float( 0.500000 );
	float2 _var15 = float2( _var11, _var13 );
	_var14 = _var14 * _var12;
	_var15 = float( 1.100000 ) * _var15;
	_var14 = _var14 * float( 0.250000 );
	_var15 = _var15 * g_cData_refraction_distortpower;
	float2 _var16 = In.vTexCoord_0 + _var14;
	_var15 = In.vTexCoord_0 + _var15;
	{
		float2 center_def = float2( 0.5f, 0.5f );
		float rot_def = float( 0.0f );
		float2 scale_def = float2( 1.0f, 1.0f );
		float2 trans_def = float2( 0.0f, 0.0f );
		float fs = sin( rot_def );
		float fc = cos( rot_def );
		float4 row_0 = float4( fc * scale_def.x, -fs * scale_def.x, 0, ( -center_def.x * fc + center_def.y * fs ) * scale_def.x + center_def.x + trans_def.x );
		float4 row_1 = float4( fs * scale_def.y, fc * scale_def.y, 0, ( -center_def.x * fs - center_def.y * fc ) * scale_def.y + center_def.y + trans_def.y );
		_var16.x = dot( float4( _var16, 0, 1 ), row_0 );
		_var16.y = dot( float4( _var16, 0, 1 ), row_1 );
	}
	{
		float2 center_def = float2( 0.5f, 0.5f );
		float rot_def = float( 0.0f );
		float2 scale_def = float2( 1.0f, 1.0f );
		float fs = sin( rot_def );
		float fc = cos( rot_def );
		float4 row_0 = float4( fc * scale_def.x, -fs * scale_def.x, 0, ( -center_def.x * fc + center_def.y * fs ) * scale_def.x + center_def.x + _var3.x );
		float4 row_1 = float4( fs * scale_def.y, fc * scale_def.y, 0, ( -center_def.x * fs - center_def.y * fc ) * scale_def.y + center_def.y + _var3.y );
		_var15.x = dot( float4( _var15, 0, 1 ), row_0 );
		_var15.y = dot( float4( _var15, 0, 1 ), row_1 );
	}
	float _var17 = tex2D( _Sampler_04, _var16 ).r;
	float4 _texLookup_76 = tex2D( _Sampler_05, _var15 );
	float3 _var18 = _texLookup_76.rgb;
	float _var19 = _texLookup_76.r;
	float _var20 = _texLookup_76.b;
	float2 _var21 = float2( _var19, _var17 );
	float3 _var22 = float3( _var21, _var20 );
	_var18 = lerp( _var18, _var22, g_cData_refraction_variationblendamount );
	_var18 = _var18 * float( 2.000000 );
	_var18 = _var18 - float( 1.000000 );
	_var18 = mul( _var18, _var5 );
	_var18 = normalize( _var18 );
	float3 _var23 = mul( float4(_var18.xyz,1), (float3x3)g_cCMatrix_ViewProj );
	float _var24 = dot( _var18, _var6 );
	float3 _var25 = reflect( _var6, _var18 );
	float2 _var26 = _var23.xy;
	float _var27 = smoothstep( float( -0.050000 ), float( -0.100000 ), _var24 );
	float _var28 = abs( _var24 );
	float3 _var29 = texCUBE( _Sampler_06, _var25 ).rgb;
	float _var30 = smoothstep( float( -1.000000 ), float( 0.150000 ), _var24 );
	float _var31 = smoothstep( float( -1.000000 ), float( -0.500000 ), _var24 );
	float _var32 = smoothstep( float( 0.100000 ), float( -0.500000 ), _var24 );
	_var26 = _var26 * _var27;
	_var28 = 1.0f - _var28;
	_var29 = _var29 * ENV_MAP_SCALE;
	float _var33 = pow( _var30, float( 10.000000 ) );
	_var31 = min( _var31, _var32 );
	float _var34 = pow( _var30, float( 2.000000 ) );
	_var26 = _var26 * float2( 1.000000, -1.000000 );
	_var28 = _var28 * float( 0.100000 );
	float3 _var35 = lerp( float( 0.880000 ), _var29, _var33 );
	float3 _var36 = _var29 * _var7;
	_var31 = _var31 * float( 0.250000 );
	_var34 = _var34 * float( 0.300000 );
	float _var37 = float( 0.004200 ) + _var28;
	float _var38 = float( 0.003000 ) + _var28;
	float _var39 = float( 0.004000 ) + _var28;
	_var36 = _var36 * g_cData_envmap_strength;
	float2 _var40 = _var26 * _var37;
	float2 _var41 = _var26 * _var38;
	float2 _var42 = _var26 * _var39;
	float3 _var43 = _var36 * _var8;
	_var40 = _var0 - _var40;
	_var41 = _var0 - _var41;
	_var42 = _var0 - _var42;
	_var43 = _var34 * _var43;
	float _var44 = tex2D( _Sampler_07, _var40 ).r;
	float _var45 = tex2D( _Sampler_07, _var41 ).g;
	float _var46 = tex2D( _Sampler_07, _var42 ).b;
	float2 _var47 = float2( _var44, _var45 );
	float3 _var48 = float3( _var47, _var46 );
	_var48 = _var48 * _var35;
	_var48 = lerp( _var48, _var36, _var31 );
	_var48 = lerp( _var48, float( 1.000000 ), _var43 );
	float4 _var49 = float4( _var48, _var9 );
	_var49 = _var49 * _var10;
	Out.vColor_0 = _var49;
	return Out;
}